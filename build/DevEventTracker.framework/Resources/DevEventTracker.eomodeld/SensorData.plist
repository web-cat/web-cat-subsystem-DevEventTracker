{
    attributes = (
        {columnName = commitHash; name = commitHash; prototypeName = mediumText; }, 
        {
            columnName = currentMethods; 
            name = currentMethods; 
            prototypeName = integer; 
            userInfo = {
                isScalar = true; 
                scalarConversionMethodName = intValue; 
                scalarDefault = 0; 
                type = int; 
                valueClassName = Integer; 
            }; 
        }, 
        {
            columnName = currentSize; 
            name = currentSize; 
            prototypeName = integer; 
            userInfo = {
                isScalar = true; 
                scalarConversionMethodName = intValue; 
                scalarDefault = 0; 
                type = int; 
                valueClassName = Integer; 
            }; 
        }, 
        {
            columnName = currentStatements; 
            name = currentStatements; 
            prototypeName = integer; 
            userInfo = {
                isScalar = true; 
                scalarConversionMethodName = intValue; 
                scalarDefault = 0; 
                type = int; 
                valueClassName = Integer; 
            }; 
        }, 
        {allowsNull = N; name = id; prototypeName = id; }, 
        {
            columnName = onTestCase; 
            name = onTestCase; 
            prototypeName = boolean; 
            userInfo = {isScalar = true; scalarDefault = true; type = boolean; }; 
        }, 
        {columnName = projectId; name = projectId; prototypeName = foreignId; }, 
        {columnName = runTime; name = runTime; prototypeName = dateTime; }, 
        {columnName = subsubtype; name = subsubtype; prototypeName = tinyText; }, 
        {columnName = subtype; name = subtype; prototypeName = tinyText; }, 
        {allowsNull = N; columnName = time; name = time; prototypeName = dateTime; }, 
        {columnName = tool; name = tool; prototypeName = tinyText; }, 
        {columnName = type; name = type; prototypeName = tinyText; }, 
        {
            allowsNull = N; 
            columnName = typeId; 
            name = typeId; 
            prototypeName = foreignId; 
        }, 
        {columnName = unitName; name = unitName; prototypeName = mediumText; }, 
        {columnName = unitType; name = unitType; prototypeName = tinyText; }, 
        {columnName = uri; name = uri; prototypeName = mediumText; }, 
        {
            allowsNull = N; 
            columnName = userId; 
            name = userId; 
            prototypeName = foreignId; 
        }
    ); 
    attributesUsedForLocking = (
        currentMethods, 
        currentSize, 
        currentStatements, 
        id, 
        onTestCase, 
        projectId, 
        subsubtype, 
        subtype, 
        tool, 
        type, 
        typeId, 
        unitType, 
        userId
    ); 
    className = "org.webcat.deveventtracker.SensorData"; 
    classProperties = (
        commitHash, 
        currentMethods, 
        currentSize, 
        currentStatements, 
        onTestCase, 
        project, 
        properties, 
        runTime, 
        sensorDataType, 
        subsubtype, 
        subtype, 
        time, 
        tool, 
        type, 
        unitName, 
        unitType, 
        uri, 
        user
    ); 
    externalName = SensorData; 
    fetchSpecificationDictionary = {}; 
    name = SensorData; 
    primaryKeyAttributes = (id); 
    relationships = (
        {
            destination = User; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = userId; }); 
            name = user; 
        }, 
        {
            destination = StudentProject; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = projectId; }); 
            name = project; 
        }, 
        {
            destination = SensorDataProperty; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = sensorDataId; sourceAttribute = id; }); 
            name = properties; 
        }, 
        {
            destination = SensorDataType; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = typeId; }); 
            name = sensorDataType; 
        }
    ); 
}
